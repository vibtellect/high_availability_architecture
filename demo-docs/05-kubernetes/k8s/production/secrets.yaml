# PostgreSQL Credentials Secret
apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
  namespace: production
  labels:
    app: postgres
    environment: production
type: Opaque
data:
  # Base64 encoded values - replace with actual production values
  username: cG9zdGdyZXM=  # postgres
  password: c2VjdXJlLXBhc3N3b3Jk  # secure-password (CHANGE IN PRODUCTION)
  database: aGFfZGVtbw==  # ha_demo
  url: amRiYzpwb3N0Z3Jlc3FsOi8vcG9zdGdyZXM6NTQzMi9oYV9kZW1v  # jdbc:postgresql://postgres:5432/ha_demo
---
# Application Secrets
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: production
  labels:
    environment: production
type: Opaque
data:
  # JWT Secret for User Service (base64 encoded)
  jwt-secret: bXlWZXJ5U2VjdXJlS2V5Rm9ySldUVG9rZW5HZW5lcmF0aW9uVGhhdFNob3VsZEJlQXRMZWFzdDI1NkJpdHNMb25n
  # Redis Password
  redis-password: cmVkaXMtc2VjdXJlLXBhc3N3b3Jk  # redis-secure-password
---
# AWS Credentials Secret
apiVersion: v1
kind: Secret
metadata:
  name: aws-credentials
  namespace: production
  labels:
    environment: production
type: Opaque
data:
  # AWS credentials for production (base64 encoded)
  access-key-id: dGVzdA==  # test (CHANGE IN PRODUCTION)
  secret-access-key: dGVzdA==  # test (CHANGE IN PRODUCTION)
  region: ZXUtY2VudHJhbC0x  # eu-central-1
---
# TLS Certificate Secret (for HTTPS)
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  namespace: production
  labels:
    environment: production
type: kubernetes.io/tls
data:
  # Replace with actual TLS certificate and key
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t  # Base64 encoded certificate
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t  # Base64 encoded private key 