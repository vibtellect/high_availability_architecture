apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service-demo
  labels:
    app: product-service-demo
    version: v1
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: product-service-demo
  template:
    metadata:
      labels:
        app: product-service-demo
        version: v1
    spec:
      containers:
      - name: product-service
        image: nginx:alpine  # Dummy service fÃ¼r Demo
        ports:
        - containerPort: 80
          name: http
        env:
        - name: NGINX_PORT
          value: "80"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        # Simulate CPU load for demo scaling
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", "echo 'Demo Product Service Ready' > /usr/share/nginx/html/index.html"]
---
apiVersion: v1
kind: Service
metadata:
  name: product-service-demo
  labels:
    app: product-service-demo
spec:
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: product-service-demo
  type: ClusterIP
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: product-service-demo-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: product-service-demo
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50  # Lower threshold for demo
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 15  # Faster scaling for demo
      policies:
      - type: Percent
        value: 100
        periodSeconds: 10
    scaleDown:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30 