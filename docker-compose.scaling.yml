version: '3.8'

# Docker Compose override for auto-scaling demonstration
# Usage: docker-compose -f docker-compose.yml -f docker-compose.scaling.yml up

services:
  product-service:
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    environment:
      - JAVA_OPTS=-Xmx256m -Xms128m
      - SPRING_PROFILES_ACTIVE=docker,demo
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,metrics,prometheus
      - SERVER_TOMCAT_MAX_THREADS=50
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  user-service:
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M
    environment:
      - JAVA_OPTS=-Xmx256m -Xms128m
      - SPRING_PROFILES_ACTIVE=docker,demo
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,metrics,prometheus
      - SERVER_TOMCAT_MAX_THREADS=50
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  checkout-service:
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    environment:
      - GOMAXPROCS=2
      - GIN_MODE=release
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s

  analytics-service:
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    environment:
      - FLASK_ENV=production
      - GUNICORN_WORKERS=2
      - GUNICORN_THREADS=4
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s

  # Load balancer for demonstration
  nginx-lb:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - product-service
      - user-service
      - checkout-service
      - analytics-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Container auto-scaler (simulated)
  autoscaler:
    image: alpine:latest
    command: >
      sh -c "
        echo 'Auto-scaler monitoring started...';
        while true; do
          sleep 30;
          echo 'Checking resource usage...';
          # This would contain actual scaling logic in production
        done
      "
    depends_on:
      - product-service
      - user-service

  # Metrics aggregator for scaling decisions
  metrics-collector:
    image: alpine:latest
    command: >
      sh -c "
        apk add --no-cache curl;
        echo 'Metrics collector started...';
        while true; do
          echo 'ðŸ“Š Collecting metrics from services...';
          curl -s http://product-service:8080/actuator/metrics/process.cpu.usage || true;
          curl -s http://user-service:8081/actuator/metrics/process.cpu.usage || true;
          sleep 10;
        done
      "
    depends_on:
      - product-service
      - user-service

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 