version: '3.8'

# OpenTelemetry Instrumentation Override f√ºr Spring Boot Services
services:
  # Product Service - Add OpenTelemetry Java Agent
  product-service:
    environment:
      # OpenTelemetry Configuration - Direct to Jaeger
      - JAVA_TOOL_OPTIONS=-javaagent:/opt/opentelemetry-javaagent.jar
      - OTEL_SERVICE_NAME=product-service
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_RESOURCE_ATTRIBUTES=service.name=product-service,service.version=1.0.0,deployment.environment=demo
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:14250
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=none
      - OTEL_LOGS_EXPORTER=none
      - OTEL_PROPAGATORS=tracecontext,baggage,b3
      # Existing environment variables remain the same
      - SPRING_PROFILES_ACTIVE=docker
      - AWS_DYNAMODB_ENDPOINT=http://localstack:4566
      - AWS_SNS_ENDPOINT=http://localstack:4566
      - AWS_REGION=eu-central-1
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
      - LOGGING_LEVEL_ROOT=INFO
      - LOGGING_LEVEL_COM_PRODUCT=DEBUG
      - EVENTS_PRODUCT_ENABLED=true
    volumes:
      - ./config/opentelemetry-javaagent.jar:/opt/opentelemetry-javaagent.jar:ro

  # User Service - Add OpenTelemetry Java Agent  
  user-service:
    environment:
      # OpenTelemetry Configuration - Direct to Jaeger
      - JAVA_TOOL_OPTIONS=-javaagent:/opt/opentelemetry-javaagent.jar
      - OTEL_SERVICE_NAME=user-service
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_RESOURCE_ATTRIBUTES=service.name=user-service,service.version=1.0.0,deployment.environment=demo
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:14250
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_METRICS_EXPORTER=none
      - OTEL_LOGS_EXPORTER=none
      - OTEL_PROPAGATORS=tracecontext,baggage,b3
      # Existing environment variables remain the same
      - SPRING_PROFILES_ACTIVE=docker
      - AWS_DYNAMODB_ENDPOINT=http://localstack:4566
      - AWS_SNS_ENDPOINT=http://localstack:4566
      - AWS_REGION=eu-central-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - JWT_SECRET=myVerySecretKeyForJWTTokenGenerationThatShouldBeAtLeast256BitsLong
      - JWT_EXPIRATION=86400000
      - LOGGING_LEVEL_ROOT=INFO
      - LOGGING_LEVEL_COM_USER=DEBUG
      - EVENTS_USER_ENABLED=true
    volumes:
      - ./config/opentelemetry-javaagent.jar:/opt/opentelemetry-javaagent.jar:ro

  # Checkout Service (Go) - Add OpenTelemetry via environment - Direct to Jaeger
  checkout-service:
    environment:
      # OpenTelemetry Configuration for Go service - Direct to Jaeger  
      - OTEL_SERVICE_NAME=checkout-service
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_RESOURCE_ATTRIBUTES=service.name=checkout-service,service.version=1.0.0,deployment.environment=demo
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:14250
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      # Existing environment variables remain the same
      - GIN_MODE=release
      - PORT=8082
      - AWS_REGION=eu-central-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DYNAMODB_ENDPOINT=http://localstack:4566
      - AWS_ENDPOINT=http://localstack:4566
      - SNS_TOPIC_ARN=arn:aws:sns:eu-central-1:000000000000:checkout-events
      - EVENTS_ENABLED=true
      - PRODUCT_SERVICE_URL=http://product-service:8080
      - USER_SERVICE_URL=http://user-service:8081

  # Analytics Service (Python) - Add OpenTelemetry via environment - Direct to Jaeger
  analytics-service:
    environment:
      # OpenTelemetry Configuration for Python service - Direct to Jaeger
      - OTEL_SERVICE_NAME=analytics-service
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_RESOURCE_ATTRIBUTES=service.name=analytics-service,service.version=1.0.0,deployment.environment=demo
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:14250
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      # Existing environment variables remain the same
      - FLASK_ENV=production
      - PORT=8083
      - AWS_REGION=eu-central-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DYNAMODB_ENDPOINT=http://localstack:4566
      - AWS_SNS_ENDPOINT=http://localstack:4566
      - AWS_SQS_ENDPOINT=http://localstack:4566
      - REDIS_URL=redis://redis:6379
      - EVENTS_ENABLED=true
      - LOG_LEVEL=INFO 